/' vim: set fdm=marker : '/
@startuml

/' I find shadows distracting! '/
skinparam shadowing false

skinparam packageStyle Rect

class Main {
  + main(String args)
}

/' Frontend {{{ '/
class Frontend <<Thread>> {
  + run() /* Thread run */
  - saveAll() /* Button */
  - runLoop() /* Button */
  - stopAll() /* Button */
}

class Serialiser {
  + load(Piece, Path)
  + save(Piece, Path)
}

class "Piece (Frontend)" as PieceF {
  + List<Loop> loops
  + Loop active
}

class "Loop (Frontend)" as LoopF {
  - name: get, set
  - source: get, set
  - List<Integer> parameters: get, set

  + Loop(String code)
  + stop()
}

Frontend --> "static" Serialiser

/' }}} '/

/' Backend {{{ '/
class Backend <<Thread>> {
  - osc.Connection
  - cubelets.Connection

  + run() /* Thread run */
}

class "Piece (Backend)" as PieceB {
  + List<Loop> loops
  + Loop active
}

class "Loop (Backend)" as LoopB {
  - name: get, set
  - source: get, set
  - List<Integer> parameters: get, set

  + Loop(String code)
  + stop()
}

/' }}} '/

Main --> "1" Frontend : "Spawns"
Main --> "1" Backend  : "Spawns"

/' Messaging {{{ '/

class MessageQueue <<Thread communication>> {
  + add(Message)
  + Message get()
}

interface Message {
}

class UpdateLoopMessage {
  - index: get, set
  - Loop
}

class SetActiveMessage {
  - ActiveIndex
}

class StopAllMessage {
}

class ParameterValues {
  - List<Integer> values
}

MessageQueue --> "0..*" Message
Message      --* UpdateLoopMessage
Message      --* SetActiveMessage
Message      --* StopAllMessage
Message      --* ParameterValues

/' }}} '/

Backend  --> "1"    PieceB
Frontend --> "1"    PieceF
PieceB    --> "0..*" LoopB
PieceF    --> "0..*" LoopF

Frontend --> "2"     MessageQueue
Backend  --> "2"     MessageQueue

class osc.Connection {
  - "connection state"

  + Connection(String host, int port)
  + close()
  + sendMessage(osc.Message message)
}

/'
interface osc.MessageListener {
  + handleMessage(osc.Message message)
}
'/

Backend --> "1" osc.Connection

class osc.Message {
  - "message state"

  + setPath(String path)
  + getPath()
  + add(Object)
  + Object[] listObjects()
}

class cubelets.Connection {
  + Connect(host, port)
  + close()
  + getCubeletValues()
    /* Polls for cubelet values
     * in the background */
}

Backend --> "1" cubelets.Connection

class "Sonic Pi Server (Ruby)" as sonic

osc.Connection "1" -- "1" sonic

class "Cubelets Server (NodeJS)" as cubelets

cubelets.Connection " 1" -- "1" cubelets

@enduml
